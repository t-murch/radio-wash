name: Deploy Web to Azure Container Apps

on:
  push:
    branches: [main]
    paths:
      - 'web/**'
      - '.github/workflows/web-deploy.yml'
  workflow_dispatch:

env:
  REGISTRY_NAME: radiowash
  APP_NAME: radiowash-web
  RESOURCE_GROUP: radio-wash_group
  CONTAINER_APPS_ENVIRONMENT: radiowash-env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./web/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/radiowash-web:${{ github.sha }},${{ secrets.ACR_LOGIN_SERVER }}/radiowash-web:latest
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.API_URL }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_WEB_URL=${{ secrets.WEB_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Azure Container Apps
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Check if container app exists
            if az containerapp show --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
              echo "Updating existing container app..."
              az containerapp update \
                --name ${{ env.APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --image ${{ secrets.ACR_LOGIN_SERVER }}/radiowash-web:${{ github.sha }} \
                --set-env-vars NEXT_PUBLIC_API_URL=${{ secrets.API_URL }} NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} NEXT_PUBLIC_WEB_URL=${{ secrets.WEB_URL }}
            else
              echo "Creating new container app..."
              az containerapp create \
                --name ${{ env.APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
                --image ${{ secrets.ACR_LOGIN_SERVER }}/radiowash-web:${{ github.sha }} \
                --target-port 3000 \
                --ingress 'external' \
                --min-replicas 0 \
                --max-replicas 10 \
                --cpu 0.25 \
                --memory 0.5Gi \
                --env-vars NEXT_PUBLIC_API_URL=${{ secrets.API_URL }} NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} NEXT_PUBLIC_WEB_URL=${{ secrets.WEB_URL }} \
                --registry-server ${{ secrets.ACR_LOGIN_SERVER }} \
                --registry-username ${{ secrets.ACR_USERNAME }} \
                --registry-password ${{ secrets.ACR_PASSWORD }}
            fi

      - name: Get Container App URL
        uses: azure/CLI@v1
        with:
          inlineScript: |
            FQDN=$(az containerapp show \
              --name ${{ env.APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            echo "ðŸš€ Frontend deployed to: https://$FQDN"
            echo "FRONTEND_URL=https://$FQDN" >> $GITHUB_ENV
