name: Continuous Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch: # Manual trigger

env:
  DOTNET_VERSION: '8.0'
  NODE_VERSION: '20'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for NX affected commands

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore .NET dependencies
        run: npx nx g @nx-dotnet/core:restore

      - name: Build affected projects
        run: npx nx affected:build --base=origin/main

      - name: Run affected tests
        run: npx nx affected:test --base=origin/main --parallel=3
        
      - name: Run unit tests with coverage (fallback)
        if: failure()
        run: |
          dotnet test api.Tests/Unit/ \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./test-results \
            --logger trx \
            --logger "console;verbosity=detailed"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ./test-results/**/*.trx
            ./test-results/**/*.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: ./test-results/**/coverage.cobertura.xml

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: .NET Tests
          path: './test-results/**/*.trx'
          reporter: dotnet-trx
          fail-on-error: true

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint affected projects
        run: npx nx affected:lint --base=origin/main

  build:
    name: Build Projects
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore .NET dependencies
        run: npx nx g @nx-dotnet/core:restore

      - name: Build affected projects
        run: npx nx affected:build --base=origin/main --configuration=production

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: always()
    
    steps:
      - name: Check test results
        if: needs.test.result == 'failure'
        run: |
          echo "‚ùå Tests failed"
          exit 1
          
      - name: Check lint results  
        if: needs.lint.result == 'failure'
        run: |
          echo "‚ùå Linting failed"
          exit 1
          
      - name: Check build results
        if: needs.build.result == 'failure'
        run: |
          echo "‚ùå Build failed"
          exit 1
          
      - name: Success
        run: |
          echo "‚úÖ All quality checks passed!"
          echo "üß™ Tests: ${{ needs.test.result }}"
          echo "üîç Lint: ${{ needs.lint.result }}"
          echo "üî® Build: ${{ needs.build.result }}"