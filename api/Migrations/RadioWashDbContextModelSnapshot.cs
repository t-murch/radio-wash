// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioWash.Api.Infrastructure.Data;

#nullable disable

namespace RadioWash.Api.Migrations
{
    [DbContext(typeof(RadioWashDbContext))]
    partial class RadioWashDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.CleanPlaylistJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BatchSize")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentBatch")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("MatchedTracks")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessedTracks")
                        .HasColumnType("integer");

                    b.Property<string>("SourcePlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourcePlaylistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetPlaylistId")
                        .HasColumnType("text");

                    b.Property<string>("TargetPlaylistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CleanPlaylistJobs");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.PlaylistSyncConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("text");

                    b.Property<string>("LastSyncStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextScheduledSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OriginalJobId")
                        .HasColumnType("integer");

                    b.Property<string>("SourcePlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SyncFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SyncStats")
                        .HasColumnType("text");

                    b.Property<string>("TargetPlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NextScheduledSync");

                    b.HasIndex("OriginalJobId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "OriginalJobId")
                        .IsUnique();

                    b.ToTable("PlaylistSyncConfigs");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.PlaylistSyncHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int?>("ExecutionTimeMs")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SyncConfigId")
                        .HasColumnType("integer");

                    b.Property<int>("TracksAdded")
                        .HasColumnType("integer");

                    b.Property<int>("TracksRemoved")
                        .HasColumnType("integer");

                    b.Property<int>("TracksUnchanged")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StartedAt");

                    b.HasIndex("SyncConfigId");

                    b.ToTable("PlaylistSyncHistory");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.ProcessedWebhookEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("ProcessedAt");

                    b.ToTable("ProcessedWebhookEvents");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxPlaylists")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxTracksPerPlaylist")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PriceInCents")
                        .HasColumnType("integer");

                    b.Property<string>("StripePriceId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.TrackMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasCleanMatch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExplicit")
                        .HasColumnType("boolean");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceArtistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceTrackId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceTrackName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetArtistName")
                        .HasColumnType("text");

                    b.Property<string>("TargetTrackId")
                        .HasColumnType("text");

                    b.Property<string>("TargetTrackName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("TrackMappings");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryProvider")
                        .HasColumnType("text");

                    b.Property<string>("SupabaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SupabaseId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserMusicToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncryptedAccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedRefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastRefreshAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProviderMetadata")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("RefreshFailureCount")
                        .HasColumnType("integer");

                    b.Property<string>("Scopes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Provider")
                        .IsUnique();

                    b.ToTable("UserMusicTokens");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserProviderData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderMetadata")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ProviderId")
                        .IsUnique();

                    b.ToTable("UserProviderData");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CurrentPeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CurrentPeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("Status");

                    b.HasIndex("StripeSubscriptionId")
                        .IsUnique()
                        .HasFilter("\"StripeSubscriptionId\" IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.CleanPlaylistJob", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.PlaylistSyncConfig", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.CleanPlaylistJob", "OriginalJob")
                        .WithMany()
                        .HasForeignKey("OriginalJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadioWash.Api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalJob");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.PlaylistSyncHistory", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.PlaylistSyncConfig", "SyncConfig")
                        .WithMany("SyncHistory")
                        .HasForeignKey("SyncConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SyncConfig");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.TrackMapping", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.CleanPlaylistJob", "Job")
                        .WithMany("TrackMappings")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserMusicToken", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserProviderData", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.User", "User")
                        .WithMany("ProviderData")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserSubscription", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.SubscriptionPlan", "Plan")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadioWash.Api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.CleanPlaylistJob", b =>
                {
                    b.Navigation("TrackMappings");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.PlaylistSyncConfig", b =>
                {
                    b.Navigation("SyncHistory");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.SubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.User", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("ProviderData");
                });
#pragma warning restore 612, 618
        }
    }
}
