// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RadioWash.Api.Infrastructure.Data;

#nullable disable

namespace RadioWash.Api.Migrations
{
    [DbContext(typeof(RadioWashDbContext))]
    [Migration("20250728183717_EnableRealtimeForCleanPlaylistJobs")]
    partial class EnableRealtimeForCleanPlaylistJobs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.CleanPlaylistJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("MatchedTracks")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessedTracks")
                        .HasColumnType("integer");

                    b.Property<string>("SourcePlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourcePlaylistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetPlaylistId")
                        .HasColumnType("text");

                    b.Property<string>("TargetPlaylistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CleanPlaylistJobs");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.TrackMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasCleanMatch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExplicit")
                        .HasColumnType("boolean");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceArtistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceTrackId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceTrackName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetArtistName")
                        .HasColumnType("text");

                    b.Property<string>("TargetTrackId")
                        .HasColumnType("text");

                    b.Property<string>("TargetTrackName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("TrackMappings");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryProvider")
                        .HasColumnType("text");

                    b.Property<string>("SupabaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SupabaseId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserMusicToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncryptedAccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedRefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastRefreshAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProviderMetadata")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("RefreshFailureCount")
                        .HasColumnType("integer");

                    b.Property<string>("Scopes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Provider")
                        .IsUnique();

                    b.ToTable("UserMusicTokens");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserProviderData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderMetadata")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ProviderId")
                        .IsUnique();

                    b.ToTable("UserProviderData");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.CleanPlaylistJob", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.TrackMapping", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.CleanPlaylistJob", "Job")
                        .WithMany("TrackMappings")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserMusicToken", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.UserProviderData", b =>
                {
                    b.HasOne("RadioWash.Api.Models.Domain.User", "User")
                        .WithMany("ProviderData")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.CleanPlaylistJob", b =>
                {
                    b.Navigation("TrackMappings");
                });

            modelBuilder.Entity("RadioWash.Api.Models.Domain.User", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("ProviderData");
                });
#pragma warning restore 612, 618
        }
    }
}
